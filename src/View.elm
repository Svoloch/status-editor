module View exposing (..)

import List
import Set
import Maybe
import Tuple
import Dict
import Array

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)

import Browser.Navigation

import Json.Decode as JD
import Json.Encode as JE

import AbstractValue
import Types exposing (..)
import OrderedSet
import OrderedDict
import Help
import Utils

drawTabs model = div [] 
  [ button
    [ onClick (MsgSelectTab TabUtils)
    , title "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
    , class "navigation-btn"
    ] [text "üîß"]
  , button
    [ onClick (MsgSelectTab TabEdges)
    , title "–ø–µ—Ä–µ—Ö–æ–¥—ã"
    , class "navigation-btn"
    ] [text "‚ÜîÔ∏è"]
  , button
    [ onClick (MsgSelectTab TabStatuses)
    , title "—Å—Ç–∞—Ç—É—Å—ã"
    , class "navigation-btn"
    ] [text "üîñ"]
  , button
    [ onClick (MsgSelectTab TabRoles)
    , title "—Ä–æ–ª–∏"
    , class "navigation-btn"
    ] [text "üîê"]
  , button
    [ onClick (MsgSelectTab TabValidators)
    , title "–≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã"
    , class "navigation-btn"
    ] [text "üóù"]
  , button
    [ onClick (MsgSelectTab TabModificatirs)
    , title "–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã"
    , class "navigation-btn"
    ] [text "‚öôÔ∏è"]
  , button
    [ onClick (MsgSelectTab TabAnalytics)
    , title "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
    , class "navigation-btn"
    ] [text "üßÆ"]
  , button
    [ onClick (MsgSelectTab TabConfig)
    , title "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    , class "navigation-btn"
    ] [text "üóú"]
  , button
    [ onClick (MsgSelectTab TabHelp)
    , title "—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
    , class "navigation-btn"
    ] [text "‚ùì"]
  ]

drawMarkedEdge model edge =
  let
    (from, to) = edge
    edgeStyle = 
      if model.state.currentEdge == Just edge
      then [class "current-edge"]
      else []
    edgeEvents =
      [ onClick (
        if model.state.currentEdge == Just edge
        then MsgSelectTab TabEdgeData
        else MsgActivateEdge edge
      )
      ]
  in
    li []
      [ input
        [ type_ "checkbox"
        , checked (Set.member edge model.state.selectedEdges)
        , onCheck <| MsgSelectEdge edge
        ] []
      , span [] [
        span (edgeStyle ++ edgeEvents)
          [ span [] <| List.singleton <| text <| (
            if model.config.preferLabel
            then
              model.value.statuses
              |> OrderedDict.get from
              |> Maybe.andThen .label
              |> Maybe.withDefault from
            else from
          )
          , text " -> "
          , span [] <| List.singleton <| text <| (
            if model.config.preferLabel
            then
              model.value.statuses
              |> OrderedDict.get to
              |> Maybe.andThen .label
              |> Maybe.withDefault to
            else to
          )
          ]
        ]
      ]
drawEdge model (from, to) = li
  [ onClick <| MsgEditEdge (from, to)]
  [ span [] <| List.singleton <| text <| (
    if model.config.preferLabel
    then
      model.value.statuses
      |> OrderedDict.get from
      |> Maybe.andThen .label
      |> Maybe.withDefault from
    else from
  )
  , text " -> "
  , span [] <| List.singleton <| text <| (
    if model.config.preferLabel
    then
      model.value.statuses
      |> OrderedDict.get to
      |> Maybe.andThen .label
      |> Maybe.withDefault to
    else to
  )
  ]

drawStatus model status =
  let
    attrs =
      if model.state.currentStatus ==  Just status
      then
        [ class "current-status"
        , onClick <| MsgSelectTab TabStatusData
        ]
      else [onClick <| MsgActivateStatus status]
  in
    li []
      [ input
        [ type_ "checkbox"
        , checked (Set.member status model.state.selectedStatuses)
        , onCheck <| MsgSelectStatus status
        ] []
      , span attrs [text status]
      ]
drawRole model role =
  let
    attrs =
      if model.state.currentRole ==  Just role
      then
        [ class "current-role"
        , onClick <| MsgSelectTab TabRoleData
        ]
      else [onClick <| MsgActivateRole role]
  in
    li []
      [ input
        [ type_ "checkbox"
        , checked (Set.member role model.state.selectedRoles)
        , onCheck <| MsgSelectRole role
        ] []
      , span attrs [text role]
      ]
drawValidator model validator =
  let
    attrs =
      if model.state.currentValidator ==  Just validator
      then
        [ class "current-validator"
        , onClick <| MsgSelectTab TabValidatorData
        ]
      else [onClick <| MsgActivateValidator validator]
  in
    li []
      [ input
        [ type_ "checkbox"
        , checked (Set.member validator model.state.selectedValidators)
        , onCheck <| MsgSelectValidator validator
        ] []
      , span attrs [text validator]
      ]
drawModificator model modificator =
  let
    attrs =
      if model.state.currentModificator ==  Just modificator
      then
        [ class "current-modificator"
        , onClick <| MsgSelectTab TabModificatorData
        ]
      else [onClick <| MsgActivateModificator modificator]
  in
    li []
      [ input
        [ type_ "checkbox"
        , checked (Set.member modificator model.state.selectedModificators)
        , onCheck <| MsgSelectModificator modificator
        ] []
      , span attrs [text modificator]
      ]

drawContent model = case model.tab of
  TabUtils -> div []
    [ button [onClick <| MsgSelectTab TabLoadedUrl] [text "–∏–∑ —Å—Å—ã–ª–∫–∏"]
    , button [onClick MsgLoadFromFile] [text "–∑–∞–≥—Ä—É–∑–∏—Ç—å"]
    , a
      [ download model.config.filename
      , href <| "data:text/json," ++ Utils.generateJSON model
      ] [button [] [text "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"]]
    -- , button [onClick MsgSeveToFile] [text "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"]
    , button [onClick MsgShowJSON] [text "JSON"]
    , button [onClick MsgClearValue] [text "—Å–±—Ä–æ—Å–∏—Ç—å"]
    , br [] []
    , pre [] [text model.json]
    , br [] []
    , button [onClick MsgClearJSON] [text "–æ—á–∏—Å—Ç–∏—Ç—å"]
    ]
  TabEdges ->
    div []
      [ h1 [] [text "–ü–µ—Ä–µ—Ö–æ–¥—ã"]
      , button [onClick MsgAddNewEdge] [text "–¥–æ–±–∞–≤–∏—Ç—å"]
      , ul [] <| List.map  (drawMarkedEdge model) <| OrderedDict.keys model.value.edges
      , button
        [ class "navigation-btn"
        , title "–≤–Ω–∞—á–∞–ª–æ"
        , disabled <| Set.isEmpty model.state.selectedEdges
        , onClick MsgMoveSelectedEdgesStart
        ] [text "üîº"]
      , button
        [ class "navigation-btn"
        , title "–≤–Ω–∞—á–∞–ª–æ"
        , disabled <| Set.isEmpty model.state.selectedEdges
        , onClick MsgMoveSelectedEdgesEnd
        ] [text "üîΩ"]
      , button
        [ class "navigation-btn"
        , title "–ø–æ–¥–Ω—è—Ç—å"
        , disabled <| (model.state.currentEdge == Nothing) || (model.state.currentEdge == List.head (OrderedDict.keys model.value.edges))
        , onClick <| (
          case model.state.currentEdge of
            Just edge -> MsgMoveEdgeUp edge
            Nothing -> MsgNone
        )
        ] [text "‚¨ÜÔ∏è"]
      , button
        [ class "navigation-btn"
        , title "–æ–ø—É—Å—Ç–∏—Ç—å"
        , disabled <| (model.state.currentEdge == Nothing) || (model.state.currentEdge == List.head (List.reverse (OrderedDict.keys model.value.edges)))
        , onClick <| (
          case model.state.currentEdge of
            Just edge -> MsgMoveEdgeDown edge
            Nothing -> MsgNone
        )
        ] [text "‚¨áÔ∏è"]
      , button
        [ class "navigation-btn"
        , title "–≤ –Ω–∞—á–∞–ª–æ"
        , disabled <| (model.state.currentEdge == Nothing) || (model.state.currentEdge == List.head (OrderedDict.keys model.value.edges))
        , onClick <| (
          case model.state.currentEdge of
            Just edge -> MsgMoveEdgeStart edge
            Nothing -> MsgNone
        )
        ] [text "‚è´"]
      , button
        [ class "navigation-btn"
        , title "–≤ –∫–æ–Ω–µ—Ü"
        , disabled <| (model.state.currentEdge == Nothing) || (model.state.currentEdge == List.head (List.reverse (OrderedDict.keys model.value.edges)))
        , onClick <| (
          case model.state.currentEdge of
            Just edge -> MsgMoveEdgeEnd edge
            Nothing -> MsgNone
        )
        ] [text "‚è¨"]
      , button
        [ class "navigation-btn"
        , title "–æ—á–∏—Å—Ç–∏—Ç—å"
        , disabled <| model.state.currentEdge == Nothing
        , onClick <| (
          case model.state.currentEdge of
            Just edge -> MsgResetCurrentEdge
            Nothing -> MsgNone
        )
        ] [text "‚ùé"]
      , button
        [ class "navigation-btn"
        , title "—É–¥–∞–ª–∏—Ç—å"
        , disabled <| model.state.currentEdge == Nothing
        , onClick <| (
          case model.state.currentEdge of
            Just edge -> MsgRemoveEdge edge
            Nothing -> MsgNone
        )
        ] [text "üöΩ"]
      ]
  TabEdgeData -> case model.state.currentEdge of
    Just (from, to) ->
      let
        statuses = model.value.statuses |> OrderedDict.keys
        statusesChangeFrom =
          if List.member from statuses
          then statuses
          else from :: statuses
        statusesChangeTo =
          if List.member to statuses
          then statuses
          else to :: statuses
        statusesSwitchBackword = model.value.edges
          |> OrderedDict.keys
          |> List.filter (\(f, t)-> t == from)
          |> List.map Tuple.first
        statusesSwitchForword = model.value.edges
          |> OrderedDict.keys
          |> List.filter (\(f, t)-> f == to)
          |> List.map Tuple.second
        statusesAddBackword = List.filter (\s->not <| List.member s statusesSwitchBackword) statuses
        statusesAddForword = List.filter (\s->not <| List.member s statusesSwitchForword) statuses
        statusToOption status = option [value status] [text status]
        emptyOption = option [selected True, value "", disabled True] [text "---"]
        optionsChangeFrom = List.map
          ( \status->
            option [value status, selected (status == from)] [text status]
          ) statusesChangeFrom
        optionsChangeTo = List.map
          ( \status->
            option [value status, selected (status == to)] [text status]
          ) statusesChangeTo
        optionsSwitchBackword = emptyOption :: List.map statusToOption statusesSwitchBackword
        optionsSwitchForword = emptyOption :: List.map statusToOption statusesSwitchForword
        optionsAddBackword = emptyOption :: List.map statusToOption statusesAddBackword
        optionsAddForword = emptyOption :: List.map statusToOption statusesAddForword
        send  (f, t) =
          if f == "" || t == ""
          then MsgNone
          else MsgAddEdge (f, t)
        roles = OrderedDict.keys model.value.edgeDataInfo.roles
        edgeData = OrderedDict.get (from, to) model.value.edges |> Maybe.withDefault emptyEdgeData
        viewRoles = List.map (
          \role->
            let
              hasRole = Set.member role edgeData.roles
            in
              li []
                [ input
                  [ type_ "checkbox"
                  , checked hasRole
                  , onClick <| MsgChangeRoleInEdge (from, to) role (not hasRole)
                  ] []
                , span [onClick <| MsgEditRole role] [text role]
                ]) roles
        optionsValidator =
          option [selected <| edgeData.validator == Nothing, value ""] [text "---"]
          :: List.map (
            \validator->
              option
                [ selected <| edgeData.validator == Just validator
                , value validator
                ] [text validator]
          ) (OrderedDict.keys model.value.edgeDataInfo.validators)
        optionsModificator =
          option [selected <| edgeData.modificator == Nothing, value ""] [text "---"]
          :: List.map (
            \modificator->
              option
                [ selected <| edgeData.modificator == Just modificator
                , value modificator
                ] [text modificator]
          ) (OrderedDict.keys model.value.edgeDataInfo.modificators)
        edgeList = OrderedDict.keys model.value.edges
        edgeArray = Array.fromList edgeList
        edgeId = edgeArray
          |> Array.toIndexedList
          |> List.filter (\(_, v) -> v == (from, to))
          |> List.head
          |> Maybe.map Tuple.first
        beforeEdge = edgeId |> Maybe.andThen (\id->Array.get (id - 1) edgeArray)
        afterEdge = edgeId |> Maybe.andThen (\id->Array.get (id + 1) edgeArray)
        firstEdge = List.head edgeList |> Maybe.andThen ( \edge->
          if edge == (from, to)
          then Nothing
          else Just edge )
        lastEgde = (List.head <| List.reverse edgeList) |> Maybe.andThen ( \edge->
          if edge == (from, to)
          then Nothing
          else Just edge )
      in
        table []
          [ thead []
            [ tr []
              [ td []
                [ text "<"
                , select [name "switch-backward", value "", onInput <| \s->send (s, from)] optionsSwitchBackword
                ]
              , th [rowspan 2]
                [ button [onClick <| MsgAddStatus from]
                  [ case OrderedDict.get from model.value.statuses |> Maybe.andThen .image of
                    Just image -> img [src image, class "icon"] []
                    Nothing -> text "üõ†"
                  ]
                , select [onInput <| \s->send (s, to)] optionsChangeFrom
                , span [] [text " ~> "]
                , select [onInput <| \s->send (from, s)] optionsChangeTo
                , button [onClick <| MsgAddStatus to] 
                  [ case OrderedDict.get to model.value.statuses |> Maybe.andThen .image of
                    Just image -> img [src image, class "icon"] []
                    Nothing -> text "üõ†"
                  ]
                ]
              , td [style "text-align" "right"]
                [ select [name "switch-forward",value "", onInput <| \s->send (to, s)] optionsSwitchForword
                , text ">"
                ]
              ]
            , tr [] 
              [ td []
                [ text "+"
                , select [name "add-backward", value "", onInput <| \s->send (s, from)] optionsAddBackword
                ]
              , td [style "text-align" "right"]
                [ select [name "add-forward", value "", onInput <| \s->send (to, s)] optionsAddForword
                , text "+"
                ]
              ]
            ]
          , tbody []
            [ tr []
              [ td [colspan 3]
                [ span [style "display" "inline-block", style "vertical-align" "top"]
                  [ h2 [] [text "–û–ø–∏—Å–∞–Ω–∏–µ:"]
                  , textarea
                    [ onInput <| MsgChangeDescriptionInEdge (from, to)
                    , value edgeData.description
                    ] []
                  , h2 [] [text "–í–∞–ª–∏–¥–∞—Ç–æ—Ä:"]
                  , select
                    [ onInput <| \v-> MsgChangeValidatorInEdge (from, to) (if v == "" then Nothing else Just v)
                    , value (edgeData.validator |> Maybe.withDefault "")
                    ]  optionsValidator
                  , button
                    [ onClick (edgeData.validator |> Maybe.map MsgEditValidator |> Maybe.withDefault MsgNone)
                    , disabled <| edgeData.validator == Nothing
                    ] [text "üõ†"]
                  , h2 [] [text "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä:"]
                  , select
                    [ onInput <| \m-> MsgChangeModificatorInEdge (from, to) (if m == "" then Nothing else Just m)
                    , value (edgeData.modificator |> Maybe.withDefault "")
                    ] optionsModificator
                  , button
                    [ onClick (edgeData.modificator |> Maybe.map MsgEditModificator |> Maybe.withDefault MsgNone)
                    , disabled <| edgeData.modificator == Nothing
                    ] [text "üõ†"]
                  ]
                , span [style "display" "inline-block", style "vertical-align" "top"]
                  [ h2 [] [text "–†–æ–ª–∏:"]
                  , ul [] viewRoles
                  ]
                ]
              ]
            ]
          , tfoot []
            [ tr []
              [ th [colspan 3]
                [ button
                  [ class "navigation-btn"
                  , title "–≤–∑–∞–¥"
                  , disabled <| beforeEdge == Nothing
                  , onClick <| MsgActivateEdge ( beforeEdge |> Maybe.withDefault (from, to) )
                  ] [text "‚óÄÔ∏è"]
                , button
                  [ class "navigation-btn"
                  , title "–≤–Ω–∞—á–∞–ª–æ"
                  , disabled <| firstEdge == Nothing
                  , onClick <| MsgActivateEdge ( firstEdge |> Maybe.withDefault (from, to) )
                  ] [text "üîΩ"]
                , button
                  [ class "navigation-btn"
                  , title "–ø–æ–¥–Ω—è—Ç—å"
                  , onClick <| MsgMoveEdgeUp (from, to)
                  ] [text "‚¨ÜÔ∏è"]
                , button
                  [ class "navigation-btn"
                  , title "–æ–ø—É—Å—Ç–∏—Ç—å"
                  , onClick <| MsgMoveEdgeDown (from, to)
                  ] [text "‚¨áÔ∏è"]
                , button
                  [ class "navigation-btn"
                  , title "–≤ –Ω–∞—á–∞–ª–æ"
                  , onClick <| MsgMoveEdgeStart (from, to)
                  ] [text "‚è´"]
                , button
                  [ class "navigation-btn"
                  , title "–≤ –∫–æ–Ω–µ—Ü"
                  , onClick <| MsgMoveEdgeEnd (from, to)
                  ] [text "‚è¨"]
                , button
                  [ class "navigation-btn"
                  , title "–æ—á–∏—Å—Ç–∏—Ç—å"
                  , onClick <| MsgClearEdge (from, to)
                  ] [text "üóë"]
                , button
                  [ class "navigation-btn"
                  , title "—É–¥–∞–ª–∏—Ç—å"
                  , onClick <| MsgRemoveEdge (from, to)
                  ] [text "üöΩ"]
                , button
                  [ class "navigation-btn"
                  , title "–∑–∞–∫—Ä—ã—Ç—å"
                  , onClick <| MsgSelectTab TabEdges
                  ] [text "‚ùé"]
                , button
                  [ class "navigation-btn"
                  , title "–≤–ø–µ—Ä—ë–¥"
                  , disabled <| lastEgde == Nothing
                  , onClick <| MsgActivateEdge ( lastEgde |> Maybe.withDefault (from, to) )
                  ] [text "üîº"]
                , button
                  [ class "navigation-btn"
                  , title "–≤–∫–æ–Ω–µ—Ü"
                  , disabled <| afterEdge == Nothing
                  , onClick <| MsgActivateEdge ( afterEdge |> Maybe.withDefault (from, to) )
                  ] [text "‚ñ∂Ô∏è"]
                ]
              ]
            ]
          ]
    Nothing ->
      let
        optionFromStatus status =  option [value status] [text status]
        options = (option [default True] [text "~~~"]) :: (model.value.statuses |> OrderedDict.keys |> List.map optionFromStatus)
        click = case (model.state.addedEdge.from, model.state.addedEdge.to) of
          (Just f, Just t) -> [onClick <| MsgAddEdge (f, t)]
          _ -> []
        (canAdd, canSwitch) = case (model.state.addedEdge.from, model.state.addedEdge.to) of
          (Just f, Just t) ->
            let
             exists = model.value.edges |> OrderedDict.member (f, t)
            in
              (not exists, exists)
          _ -> (False, False)
      in
        div []
          [ select [onInput MsgChangeAddedEdgeFrom] options
          , text "->"
          , select [onInput MsgChangeAddedEdgeTo] options
          , button ((disabled <| not canAdd) :: click) [text "+"]
          , button ((disabled <| not canSwitch) :: click) [text "->"]
          ]
  TabStatuses -> div []
    [ div []
      [ h1 [] [text "–°—Ç–∞—Ç—É—Å—ã"]
      , button [onClick MsgAddNewStatus] [text "–¥–æ–±–∞–≤–∏—Ç—å"]
      ]
    , div [] [ul [] (
      model.value.statuses
      |> OrderedDict.keys
      |> List.map (drawStatus model)
    )]
    , button
      [ class "navigation-btn"
      , title "–≤–Ω–∞—á–∞–ª–æ"
      , disabled <| Set.isEmpty model.state.selectedStatuses
      , onClick MsgMoveSelectedStatusesStart
      ] [text "üîº"]
    , button
      [ class "navigation-btn"
      , title "–≤–Ω–∞—á–∞–ª–æ"
      , disabled <| Set.isEmpty model.state.selectedStatuses
      , onClick MsgMoveSelectedStatusesEnd
      ] [text "üîΩ"]
    , button
      [ class "navigation-btn"
      , title "–ø–æ–¥–Ω—è—Ç—å"
      , disabled <| (model.state.currentStatus == Nothing) || (model.state.currentStatus == List.head (OrderedDict.keys model.value.statuses))
      , onClick <| (
        case model.state.currentStatus of
          Just status -> MsgMoveStatusUp status
          Nothing -> MsgNone
      )
      ] [text "‚¨ÜÔ∏è"]
    , button
      [ class "navigation-btn"
      , title "–æ–ø—É—Å—Ç–∏—Ç—å"
      , disabled <| (model.state.currentStatus == Nothing) || (model.state.currentStatus == List.head (List.reverse (OrderedDict.keys model.value.statuses)))
      , onClick <| (
        case model.state.currentStatus of
          Just status -> MsgMoveStatusDown status
          Nothing -> MsgNone
      )
      ] [text "‚¨áÔ∏è"]
    , button
      [ class "navigation-btn"
      , title "–≤ –Ω–∞—á–∞–ª–æ"
      , disabled <| (model.state.currentStatus == Nothing) || (model.state.currentStatus == List.head (OrderedDict.keys model.value.statuses))
      , onClick <| (
        case model.state.currentStatus of
          Just status -> MsgMoveStatusStart status
          Nothing -> MsgNone
      )
      ] [text "‚è´"]
    , button
      [ class "navigation-btn"
      , title "–≤ –∫–æ–Ω–µ—Ü"
      , disabled <| (model.state.currentStatus == Nothing) || (model.state.currentStatus == List.head (List.reverse (OrderedDict.keys model.value.statuses)))
      , onClick <| (
        case model.state.currentStatus of
          Just status -> MsgMoveStatusEnd status
          Nothing -> MsgNone
      )
      ] [text "‚è¨"]
    , button
      [ class "navigation-btn"
      , title "–æ—á–∏—Å—Ç–∏—Ç—å"
      , disabled <| model.state.currentStatus == Nothing
      , onClick <| (
        case model.state.currentStatus of
          Just status -> MsgResetCurrentStatus
          Nothing -> MsgNone
      )
      ] [text "‚ùé"]
    , button
      [ class "navigation-btn"
      , title "—É–¥–∞–ª–∏—Ç—å"
      , disabled <| model.state.currentStatus == Nothing
      , onClick <| (
        case model.state.currentStatus of
          Just status -> MsgRemoveStatus status
          Nothing -> MsgNone
      )
      ] [text "üöΩ"]
    ]
  TabStatusData -> case model.state.currentStatus of
    Just status ->
      let
        statusData =
          OrderedDict.get status model.value.statuses
          |> Maybe.withDefault emptyStatusData
        fromList = model.value.edges
          |> OrderedDict.keys
          |> List.filter (\(f, _)-> Just f == model.state.currentStatus)
          |> List.map Tuple.second
        toList =  model.value.edges
          |> OrderedDict.keys
          |> List.filter (\(_, t)-> Just t == model.state.currentStatus)
          |> List.map Tuple.first

        statusList = OrderedDict.keys model.value.statuses
        statusArray = Array.fromList statusList
        statusId = statusArray
          |> Array.toIndexedList
          |> List.filter (\(_, v)-> v == status)
          |> List.head
          |> Maybe.map Tuple.first
        beforeStatus = statusId |> Maybe.andThen (\id->Array.get (id - 1) statusArray)
        afterStatus = statusId |> Maybe.andThen (\id->Array.get (id + 1) statusArray)
        firstStatus = List.head statusList |> Maybe.andThen ( \st->
          if st == status
          then Nothing
          else Just st )
        lastStatus = (List.head <| List.reverse statusList) |> Maybe.andThen ( \st->
          if st == status
          then Nothing
          else Just st )
      in div []
        [ ul [style "display" "inline-block"] <| List.map (
          \from-> li []
            [ button [onClick <| MsgAddStatus from] [text from]
            , button [onClick <| MsgSwitchEdge (status, from)] [text "<---"]
            ]
        ) fromList
        , span [style "display" "inline-block", style "vertical-align" "top"]
          [ h1 []
            [ text status
            ]
          , br [] []
          , button [onClick <| MsgStartRenameStatus status] [text "–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"]
          , h2 [] [text "–ò–∫–æ–Ω–∫–∞"]
          , hr [] []
          , div []
            <| List.filterMap identity [ statusData.image |> Maybe.map (\im -> img [class "image", src im] [])
            , Just <| br [] []
            , Just <| button [onClick <| MsgLoadImageInStatusFromFile status] [text "–∑–∞–≥—Ä—É–∑–∏—Ç—å"]
            , Just <| button [onClick <| MsgSelectTab TabChangeStatusImage] [text "–≤–≤–µ—Å—Ç–∏"]
            , statusData.image |> Maybe.map (\_ -> button [onClick <| MsgChangeImageInStatus status Nothing] [text "—É–¥–∞–ª–∏—Ç—å"])
            ]
          , hr [] []
          , h2 [] [text "–ù–∞–∑–≤–∞–Ω–∏–µ:"]
          , input
            [ onInput (\l->MsgChangeLabelInStatus status (Just l))
            , value (statusData.label |> Maybe.withDefault "")
            ] []
          , h2 [] [text "–û–ø–∏—Å–∞–Ω–∏–µ:"]
          , textarea
            [ onInput <| MsgChangeDescriptionInStatus status
            , value statusData.description
            ] []
          ]
        , ul [style "display" "inline-block"] <| List.map (
          \to -> li []
            [ button [onClick <| MsgSwitchEdge (to, status)] [text "--->"]
            , button [onClick <| MsgAddStatus to] [text to]
            ]
        ) toList
        , div[]
          [ button
            [ class "navigation-btn"
            , title "–≤–∑–∞–¥"
            , disabled <| beforeStatus == Nothing
            , onClick <| MsgActivateStatus ( beforeStatus |> Maybe.withDefault status )
            ] [text "‚óÄÔ∏è"]
          , button
            [ class "navigation-btn"
            , title "–≤–Ω–∞—á–∞–ª–æ"
            , disabled <| firstStatus == Nothing
            , onClick <| MsgActivateStatus ( firstStatus |> Maybe.withDefault status )
            ] [text "üîΩ"]
          , button
            [ class "navigation-btn"
            , title "–ø–æ–¥–Ω—è—Ç—å"
            , onClick <| MsgMoveStatusUp status
            ] [text "‚¨ÜÔ∏è"]
          , button
            [ class "navigation-btn"
            , title "–æ–ø—É—Å—Ç–∏—Ç—å"
            , onClick <| MsgMoveStatusDown status
            ] [text "‚¨áÔ∏è"]
          , button
            [ class "navigation-btn"
            , title "–≤ –Ω–∞—á–∞–ª–æ"
            , onClick <| MsgMoveStatusStart status
            ] [text "‚è´"]
          , button
            [ class "navigation-btn"
            , title "–≤ –∫–æ–Ω–µ—Ü"
            , onClick <| MsgMoveStatusEnd status
            ] [text "‚è¨"]
          , button
            [ class "navigation-btn"
            , title "–æ—á–∏—Å—Ç–∏—Ç—å"
            , onClick <| MsgClearStatus status
            ] [text "üóë"]
          , button
            [ class "navigation-btn"
            , title "—É–¥–∞–ª–∏—Ç—å"
            , onClick <| MsgRemoveStatus status
            ] [text "üöΩ"]
          , button
            [ class "navigation-btn"
            , title "–∑–∞–∫—Ä—ã—Ç—å"
            , onClick <| MsgSelectTab TabStatuses
            ] [text "‚ùé"]
          , button
            [ class "navigation-btn"
            , title "–≤–ø–µ—Ä—ë–¥"
            , disabled <| lastStatus == Nothing
            , onClick <| MsgActivateStatus ( lastStatus |> Maybe.withDefault status )
            ] [text "üîº"]
          , button
            [ class "navigation-btn"
            , title "–≤–∫–æ–Ω–µ—Ü"
            , disabled <| afterStatus == Nothing
            , onClick <| MsgActivateStatus ( afterStatus |> Maybe.withDefault status )
            ] [text "‚ñ∂Ô∏è"]
          ]
        ]
    Nothing -> div []
      [ h1 [] [text "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å"]
      , br [] []
      , input
        [ onInput MsgChangeAddedStatus
        , type_ "text"
        ] []
      , button
        [ onClick (MsgAddStatus model.state.addedStatus)
        , disabled (model.state.addedStatus == "")
        ] [text "–¥–æ–±–∞–≤–∏—Ç—å"]
      ]
  TabChangeStatusImage -> case model.state.currentStatus of
    Just status -> div []
      [ h1 [] [text "–í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]
      , h2 [] [text status]
      , input
        [ onInput (\v -> MsgChangeImageInStatus status (Just v))
        , value (OrderedDict.get status model.value.statuses |> Maybe.andThen .image |> Maybe.withDefault "")
        ] []
      , button [onClick <| MsgSelectTab TabStatusData] [text "Ok"]
      ]
    Nothing -> h1 [] [text "Warning!!!"]
  TabRenameStatus -> case model.state.currentStatus of
    Just status -> div []
      [ h1 [] [text "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å"]
      , h2 [] [text status]
      , input
        [ value model.state.addedStatus
        , onInput MsgChangeAddedStatus
        , type_ "text"
        ] []
      , button [ onClick <| MsgRenameStatus status model.state.addedStatus ] [text "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"]
      ]
    Nothing -> h1 [] [text "Warning!!!"]
  TabRoles -> div []
    [ div []
      [ h1 [] [text "–†–æ–ª–∏"]
      , button [onClick MsgAddNewRole] [text "–¥–æ–±–∞–≤–∏—Ç—å"]
      ]
    , div [] [ul [] (
      model.value.edgeDataInfo.roles
      |> OrderedDict.keys
      |> List.map (drawRole model)
    )]
    , button
      [ class "navigation-btn"
      , title "–≤–Ω–∞—á–∞–ª–æ"
      , disabled <| Set.isEmpty model.state.selectedRoles
      , onClick MsgMoveSelectedRolesStart
      ] [text "üîº"]
    , button
      [ class "navigation-btn"
      , title "–≤–Ω–∞—á–∞–ª–æ"
      , disabled <| Set.isEmpty model.state.selectedRoles
      , onClick MsgMoveSelectedRolesEnd
      ] [text "üîΩ"]
    , button
      [ class "navigation-btn"
      , title "–ø–æ–¥–Ω—è—Ç—å"
      , disabled <| (model.state.currentRole == Nothing) || (model.state.currentRole == List.head (OrderedDict.keys model.value.edgeDataInfo.roles))
      , onClick <| (
        case model.state.currentRole of
          Just role -> MsgMoveRoleUp role
          Nothing -> MsgNone
      )
      ] [text "‚¨ÜÔ∏è"]
    , button
      [ class "navigation-btn"
      , title "–æ–ø—É—Å—Ç–∏—Ç—å"
      , disabled <| (model.state.currentRole == Nothing) || (model.state.currentRole == List.head (List.reverse (OrderedDict.keys model.value.edgeDataInfo.roles)))
      , onClick <| (
        case model.state.currentRole of
          Just role -> MsgMoveRoleDown role
          Nothing -> MsgNone
      )
      ] [text "‚¨áÔ∏è"]
    , button
      [ class "navigation-btn"
      , title "–≤ –Ω–∞—á–∞–ª–æ"
      , disabled <| (model.state.currentRole == Nothing) || (model.state.currentRole == List.head (OrderedDict.keys model.value.edgeDataInfo.roles))
      , onClick <| (
        case model.state.currentRole of
          Just role -> MsgMoveRoleStart role
          Nothing -> MsgNone
      )
      ] [text "‚è´"]
    , button
      [ class "navigation-btn"
      , title "–≤ –∫–æ–Ω–µ—Ü"
      , disabled <| (model.state.currentRole == Nothing) || (model.state.currentRole == List.head (List.reverse (OrderedDict.keys model.value.edgeDataInfo.roles)))
      , onClick <| (
        case model.state.currentRole of
          Just role -> MsgMoveRoleEnd role
          Nothing -> MsgNone
      )
      ] [text "‚è¨"]
    , button
      [ class "navigation-btn"
      , title "–æ—á–∏—Å—Ç–∏—Ç—å"
      , disabled <| model.state.currentRole == Nothing
      , onClick <| (
        case model.state.currentRole of
          Just role -> MsgResetCurrentRole
          Nothing -> MsgNone
      )
      ] [text "‚ùé"]
    , button
      [ class "navigation-btn"
      , title "—É–¥–∞–ª–∏—Ç—å"
      , disabled <| model.state.currentRole == Nothing
      , onClick <| (
        case model.state.currentRole of
          Just role -> MsgRemoveRole role
          Nothing -> MsgNone
      )
      ] [text "üöΩ"]
    ]
  TabRoleData -> case model.state.currentRole of
    Just role ->
      let
        roleData =
          OrderedDict.get role model.value.edgeDataInfo.roles
          |> Maybe.withDefault emptyRoleData
        roleList = OrderedDict.keys model.value.edgeDataInfo.roles
        roleArray = Array.fromList roleList
        roleId = roleArray
          |> Array.toIndexedList
          |> List.filter (\(_, v)-> v == role)
          |> List.head
          |> Maybe.map Tuple.first
        beforeRole = roleId |> Maybe.andThen (\id->Array.get (id - 1) roleArray)
        afterRole = roleId |> Maybe.andThen (\id->Array.get (id + 1) roleArray)
        firstRole = List.head roleList |> Maybe.andThen ( \ro ->
          if ro == role
          then Nothing
          else Just ro )
        lastRole = (List.head <| List.reverse roleList) |> Maybe.andThen ( \ro ->
          if ro == role
          then Nothing
          else Just ro )
      in
        div []
          [ h1 [] [text "–†–æ–ª—å:"]
          , h1 [] [text role]
          , button [onClick <| MsgStartRenameRole role] [text "–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"]
          , div []
            [ div [style "display" "inline-block", style "vertical-align" "top"]
              [ h2 [] [text "–ù–∞–∑–≤–∞–Ω–∏–µ:"]
              , br [] []
              , input
                [ onInput (MsgChangeLabelInRole role << Just)
                , value (roleData.label |> Maybe.withDefault "")
                ] []
              , h2 [] [text "–û–ø–∏—Å–∞–Ω–∏–µ:"]
              , textarea
                [ onInput <| MsgChangeDescriptionInRole role
                , value roleData.description
                ] []
              ]
            , div [style "display" "inline-block", style "vertical-align" "top"]
              [ h2 [] [text "–ò—Å–ø–æ–ª—å—Ö—É—é—Ç—Å—è –≤:"]
              , ul []
                <| List.map (drawEdge model)
                <| List.filter
                  (
                    \e -> OrderedDict.get e model.value.edges
                      |> Maybe.map .roles
                      |> Maybe.map (Set.member role)
                      |> Maybe.withDefault False
                  )
                <| OrderedDict.keys model.value.edges
              ]
            ]
          , div []
            [ button
              [ class "navigation-btn"
              , title "–≤–∑–∞–¥"
              , disabled <| beforeRole == Nothing
              , onClick <| MsgActivateRole ( beforeRole |> Maybe.withDefault role )
              ] [text "‚óÄÔ∏è"]
            , button
              [ class "navigation-btn"
              , title "–≤–Ω–∞—á–∞–ª–æ"
              , disabled <| firstRole == Nothing
              , onClick <| MsgActivateRole ( firstRole |> Maybe.withDefault role )
              ] [text "üîΩ"]
            , button
              [ class "navigation-btn"
              , title "–ø–æ–¥–Ω—è—Ç—å"
              , onClick <| MsgMoveRoleUp role
              ] [text "‚¨ÜÔ∏è"]
            , button
              [ class "navigation-btn"
              , title "–æ–ø—É—Å—Ç–∏—Ç—å"
              , onClick <| MsgMoveRoleDown role
              ] [text "‚¨áÔ∏è"]
            , button
              [ class "navigation-btn"
              , title "–≤ –Ω–∞—á–∞–ª–æ"
              , onClick <| MsgMoveRoleStart role
              ] [text "‚è´"]
            , button
              [ class "navigation-btn"
              , title "–≤ –∫–æ–Ω–µ—Ü"
              , onClick <| MsgMoveRoleEnd role
              ] [text "‚è¨"]
            , button
              [ class "navigation-btn"
              , title "–æ—á–∏—Å—Ç–∏—Ç—å"
              , onClick <| MsgClearRole role
              ] [text "üóë"]
            , button
              [ class "navigation-btn"
              , title "—É–¥–∞–ª–∏—Ç—å"
              , onClick <| MsgRemoveRole role
              ] [text "üöΩ"]
            , button
              [ class "navigation-btn"
              , title "–∑–∞–∫—Ä—ã—Ç—å"
              , onClick <| MsgSelectTab TabRoles
              ] [text "‚ùé"]
            , button
              [ class "navigation-btn"
              , title "–≤–ø–µ—Ä—ë–¥"
              , disabled <| lastRole == Nothing
              , onClick <| MsgActivateRole ( lastRole |> Maybe.withDefault role )
              ] [text "üîº"]
            , button
              [ class "navigation-btn"
              , title "–≤–∫–æ–Ω–µ—Ü"
              , disabled <| afterRole == Nothing
              , onClick <| MsgActivateRole ( afterRole |> Maybe.withDefault role )
              ] [text "‚ñ∂Ô∏è"]
            ]

          ]
    Nothing -> div []
      [ h1 [] [text "–ù–æ–≤–∞—è —Ä–æ–ª—å"]
      , br [] []
      , input
        [ onInput MsgChangeAddedRole
        , type_ "text"
        ] []
      , button
        [ onClick (MsgAddRole model.state.addedRole)
        , disabled (model.state.addedRole == "")
        ] [text "–¥–æ–±–∞–≤–∏—Ç—å"]
      ]
  TabRenameRole -> case model.state.currentRole of
    Just role -> div []
      [ h1 [] [text "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–æ–ª—å"]
      , h2 [] [text role]
      , input
        [ value model.state.addedRole
        , onInput MsgChangeAddedRole
        , type_ "text"
        ] []
      , button [ onClick <| MsgRenameRole role model.state.addedRole ] [text "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"]
      ]
    Nothing -> h1 [] [text "Warning!!!"]
  TabValidators -> div []
    [ div []
      [ h1 [] [text "–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã"]
      , button [onClick MsgAddNewValidator] [text "–¥–æ–±–∞–≤–∏—Ç—å"]
      ]
    , div [] [ul [] (
      OrderedDict.keys model.value.edgeDataInfo.validators
      |> List.map (drawValidator model)
    )]
    , button
      [ class "navigation-btn"
      , title "–≤–Ω–∞—á–∞–ª–æ"
      , disabled <| Set.isEmpty model.state.selectedValidators
      , onClick MsgMoveSelectedValidatorsStart
      ] [text "üîº"]
    , button
      [ class "navigation-btn"
      , title "–≤–Ω–∞—á–∞–ª–æ"
      , disabled <| Set.isEmpty model.state.selectedValidators
      , onClick MsgMoveSelectedValidatorsEnd
      ] [text "üîΩ"]
    , button
      [ class "navigation-btn"
      , title "–ø–æ–¥–Ω—è—Ç—å"
      , disabled <| (model.state.currentValidator == Nothing) || (model.state.currentValidator == List.head (OrderedDict.keys model.value.edgeDataInfo.roles))
      , onClick <| (
        case model.state.currentValidator of
          Just validator -> MsgMoveValidatorUp validator
          Nothing -> MsgNone
      )
      ] [text "‚¨ÜÔ∏è"]
    , button
      [ class "navigation-btn"
      , title "–æ–ø—É—Å—Ç–∏—Ç—å"
      , disabled <| (model.state.currentValidator == Nothing) || (model.state.currentValidator == List.head (List.reverse (OrderedDict.keys model.value.edgeDataInfo.roles)))
      , onClick <| (
        case model.state.currentValidator of
          Just validator -> MsgMoveValidatorDown validator
          Nothing -> MsgNone
      )
      ] [text "‚¨áÔ∏è"]
    , button
      [ class "navigation-btn"
      , title "–≤ –Ω–∞—á–∞–ª–æ"
      , disabled <| (model.state.currentValidator == Nothing) || (model.state.currentValidator == List.head (OrderedDict.keys model.value.edgeDataInfo.roles))
      , onClick <| (
        case model.state.currentValidator of
          Just validator -> MsgMoveValidatorStart validator
          Nothing -> MsgNone
      )
      ] [text "‚è´"]
    , button
      [ class "navigation-btn"
      , title "–≤ –∫–æ–Ω–µ—Ü"
      , disabled <| (model.state.currentValidator == Nothing) || (model.state.currentValidator == List.head (List.reverse (OrderedDict.keys model.value.edgeDataInfo.roles)))
      , onClick <| (
        case model.state.currentValidator of
          Just validator -> MsgMoveValidatorEnd validator
          Nothing -> MsgNone
      )
      ] [text "‚è¨"]
    , button
      [ class "navigation-btn"
      , title "–æ—á–∏—Å—Ç–∏—Ç—å"
      , disabled <| model.state.currentValidator == Nothing
      , onClick <| (
        case model.state.currentValidator of
          Just validator -> MsgResetCurrentValidator
          Nothing -> MsgNone
      )
      ] [text "‚ùé"]
    , button
      [ class "navigation-btn"
      , title "—É–¥–∞–ª–∏—Ç—å"
      , disabled <| model.state.currentValidator == Nothing
      , onClick <| (
        case model.state.currentValidator of
          Just validator -> MsgRemoveValidator validator
          Nothing -> MsgNone
      )
      ] [text "üöΩ"]
    ]
  TabValidatorData -> case model.state.currentValidator of
    Just validator ->
      let
        validatorData =
          OrderedDict.get validator model.value.edgeDataInfo.validators
          |> Maybe.withDefault emptyValidatorData
        validatorList = OrderedDict.keys model.value.edgeDataInfo.validators
        validatorArray = Array.fromList validatorList
        validatorId = validatorArray
          |> Array.toIndexedList
          |> List.filter (\(_, v)-> v == validator)
          |> List.head
          |> Maybe.map Tuple.first
        beforeValidator = validatorId |> Maybe.andThen (\id->Array.get (id - 1) validatorArray)
        afterValidator = validatorId |> Maybe.andThen (\id->Array.get (id + 1) validatorArray)
        firstValidator = List.head validatorList |> Maybe.andThen ( \va ->
          if va == validator
          then Nothing
          else Just va )
        lastValidator = ( List.head <| List.reverse validatorList) |> Maybe.andThen ( \va ->
          if va == validator
          then Nothing
          else Just va )
      in
        div []
          [ h1 [] [text validator]
          , br [] []
          , button [onClick <| MsgStartRenameValidator validator] [text "–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"]
          , div []
            [ div [style "display" "inline-block", style "vertical-align" "top"]
              [ h2 [] [text "–ù–∞–∑–≤–∞–Ω–∏–µ:"]
              , input
                [ onInput (\l->MsgChangeLabelInValidator validator (Just l))
                , value (validatorData.label |> Maybe.withDefault "")
                ] []
              , h2 [] [text "–û–ø–∏—Å–∞–Ω–∏–µ:"]
              , textarea
                [ onInput <| MsgChangeDescriptionInValidator validator
                , value validatorData.description
                ] []
              ]
            , div [style "display" "inline-block", style "vertical-align" "top"]
              [ h2 [] [text "–ò—Å–ø–æ–ª—å—Ö—É—é—Ç—Å—è –≤:"]
              , ul []
                <| List.map (drawEdge model)
                <| List.filter
                  (
                    \v ->
                      OrderedDict.get v model.value.edges
                      |> Maybe.andThen .validator
                      |> (==) (Just validator)
                  )
                <| OrderedDict.keys model.value.edges
              ]
            ]
          , div[]
            [ button
              [ class "navigation-btn"
              , title "–≤–∑–∞–¥"
              , disabled <| beforeValidator == Nothing
              , onClick <| MsgActivateValidator ( beforeValidator |> Maybe.withDefault validator )
              ] [text "‚óÄÔ∏è"]
            , button
              [ class "navigation-btn"
              , title "–≤–Ω–∞—á–∞–ª–æ"
              , disabled <| firstValidator == Nothing
              , onClick <| MsgActivateValidator ( firstValidator |> Maybe.withDefault validator )
              ] [text "üîΩ"]
            , button
              [ class "navigation-btn"
              , title "–ø–æ–¥–Ω—è—Ç—å"
              , onClick <| MsgMoveValidatorUp validator
              ] [text "‚¨ÜÔ∏è"]
            , button
              [ class "navigation-btn"
              , title "–æ–ø—É—Å—Ç–∏—Ç—å"
              , onClick <| MsgMoveValidatorDown validator
              ] [text "‚¨áÔ∏è"]
            , button
              [ class "navigation-btn"
              , title "–≤ –Ω–∞—á–∞–ª–æ"
              , onClick <| MsgMoveValidatorStart validator
              ] [text "‚è´"]
            , button
              [ class "navigation-btn"
              , title "–≤ –∫–æ–Ω–µ—Ü"
              , onClick <| MsgMoveValidatorEnd validator
              ] [text "‚è¨"]
            , button
              [ class "navigation-btn"
              , title "–æ—á–∏—Å—Ç–∏—Ç—å"
              , onClick <| MsgClearValidator validator
              ] [text "üóë"]
            , button
              [ class "navigation-btn"
              , title "—É–¥–∞–ª–∏—Ç—å"
              , onClick <| MsgRemoveValidator validator
              ] [text "üöΩ"]
            , button
              [ class "navigation-btn"
              , title "–∑–∞–∫—Ä—ã—Ç—å"
              , onClick <| MsgSelectTab TabValidators
              ] [text "‚ùé"]
            , button
              [ class "navigation-btn"
              , title "–≤–ø–µ—Ä—ë–¥"
              , disabled <| lastValidator == Nothing
              , onClick <| MsgActivateValidator ( lastValidator |> Maybe.withDefault validator )
              ] [text "üîº"]
            , button
              [ class "navigation-btn"
              , title "–≤–∫–æ–Ω–µ—Ü"
              , disabled <| afterValidator == Nothing
              , onClick <| MsgActivateValidator ( afterValidator |> Maybe.withDefault validator )
              ] [text "‚ñ∂Ô∏è"]
            ]
          ]
    Nothing -> div []
      [ h1 [] [text "–ù–æ–≤—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä"]
      , br [] []
      , input
        [ onInput MsgChangeAddedValidator
        , type_ "text"
        ] []
      , button
        [ onClick (MsgAddValidator model.state.addedValidator)
        , disabled (model.state.addedValidator == "")
        ] [text "–¥–æ–±–∞–≤–∏—Ç—å"]
      ]
  TabRenameValidator -> case model.state.currentValidator of
    Just validator -> div []
      [ h1 [] [text "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä"]
      , h2 [] [text validator]
      , input
        [ value model.state.addedValidator
        , onInput MsgChangeAddedValidator
        , type_ "text"
        ] []
      , button [ onClick <| MsgRenameValidator validator model.state.addedValidator ] [text "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"]
      ]
    Nothing -> h1 [] [text "Warning!!!"]
  TabModificatirs -> div []
    [ div []
      [ h1 [] [text "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã"]
      , button [onClick MsgAddNewModificator] [text "–¥–æ–±–∞–≤–∏—Ç—å"]
      ]
    , div [] [ul [] (
      model.value.edgeDataInfo.modificators
      |> OrderedDict.keys
      |> List.map (drawModificator model)
    )]
    , button
      [ class "navigation-btn"
      , title "–≤–Ω–∞—á–∞–ª–æ"
      , disabled <| Set.isEmpty model.state.selectedModificators
      , onClick MsgMoveSelectedModificatorsStart
      ] [text "üîº"]
    , button
      [ class "navigation-btn"
      , title "–≤–Ω–∞—á–∞–ª–æ"
      , disabled <| Set.isEmpty model.state.selectedModificators
      , onClick MsgMoveSelectedModificatorsEnd
      ] [text "üîΩ"]
    , button
      [ class "navigation-btn"
      , title "–ø–æ–¥–Ω—è—Ç—å"
      , disabled <| (model.state.currentModificator == Nothing) || (model.state.currentModificator == List.head (OrderedDict.keys model.value.edgeDataInfo.modificators))
      , onClick <| (
        case model.state.currentModificator of
          Just modificator -> MsgMoveModificatorUp modificator
          Nothing -> MsgNone
      )
      ] [text "‚¨ÜÔ∏è"]
    , button
      [ class "navigation-btn"
      , title "–æ–ø—É—Å—Ç–∏—Ç—å"
      , disabled <| (model.state.currentModificator == Nothing) || (model.state.currentModificator == List.head (List.reverse (OrderedDict.keys model.value.edgeDataInfo.modificators)))
      , onClick <| (
        case model.state.currentModificator of
          Just modificator -> MsgMoveModificatorDown modificator
          Nothing -> MsgNone
      )
      ] [text "‚¨áÔ∏è"]
    , button
      [ class "navigation-btn"
      , title "–≤ –Ω–∞—á–∞–ª–æ"
      , disabled <| (model.state.currentModificator == Nothing) || (model.state.currentModificator == List.head (OrderedDict.keys model.value.edgeDataInfo.modificators))
      , onClick <| (
        case model.state.currentModificator of
          Just modificator -> MsgMoveModificatorStart modificator
          Nothing -> MsgNone
      )
      ] [text "‚è´"]
    , button
      [ class "navigation-btn"
      , title "–≤ –∫–æ–Ω–µ—Ü"
      , disabled <| (model.state.currentModificator == Nothing) || (model.state.currentModificator == List.head (List.reverse (OrderedDict.keys model.value.edgeDataInfo.modificators)))
      , onClick <| (
        case model.state.currentModificator of
          Just modificator -> MsgMoveModificatorEnd modificator
          Nothing -> MsgNone
      )
      ] [text "‚è¨"]
    , button
      [ class "navigation-btn"
      , title "–æ—á–∏—Å—Ç–∏—Ç—å"
      , disabled <| model.state.currentModificator == Nothing
      , onClick <| (
        case model.state.currentModificator of
          Just modificator -> MsgResetCurrentModificator
          Nothing -> MsgNone
      )
      ] [text "‚ùé"]
    , button
      [ class "navigation-btn"
      , title "—É–¥–∞–ª–∏—Ç—å"
      , disabled <| model.state.currentModificator == Nothing
      , onClick <| (
        case model.state.currentModificator of
          Just modificator -> MsgRemoveModificator modificator
          Nothing -> MsgNone
      )
      ] [text "üöΩ"]
    ]
  TabModificatorData -> case model.state.currentModificator of
    Just modificator ->
      let
        modificatorData =
          OrderedDict.get modificator model.value.edgeDataInfo.modificators
          |> Maybe.withDefault emptyModificatorData
        modificatorList = OrderedDict.keys model.value.edgeDataInfo.modificators
        modificatorArray = Array.fromList modificatorList
        modificatorId = modificatorArray
          |> Array.toIndexedList
          |> List.filter (\(_, v)-> v == modificator)
          |> List.head
          |> Maybe.map Tuple.first
        beforeModificator = modificatorId |> Maybe.andThen (\id->Array.get (id - 1) modificatorArray)
        afterModificator = modificatorId |> Maybe.andThen (\id->Array.get (id + 1) modificatorArray)
        firstModificator = List.head modificatorList |> Maybe.andThen ( \mo ->
          if mo == modificator
          then Nothing
          else Just mo )
        lastModificator = (List.head <| List.reverse modificatorList) |> Maybe.andThen ( \mo ->
          if mo == modificator
          then Nothing
          else Just mo )
      in
        div []
          [ h1 [] [text modificator]
          , br [] []
          , button [onClick <| MsgStartRenameModificator modificator] [text "–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"]
          , div []
            [ div [style "display" "inline-block", style "vertical-align" "top"]
              [ h2 [] [text "–ù–∞–∑–≤–∞–Ω–∏–µ:"]
              , input
                [ onInput (\l->MsgChangeLabelInModificator modificator (Just l))
                , value (modificatorData.label |> Maybe.withDefault "")
                ] []
              , h2 [] [text "–û–ø–∏—Å–∞–Ω–∏–µ:"]
              , textarea
                [ onInput <| MsgChangeDescriptionInModificator modificator
                , value modificatorData.description
                ] []
              ]
            , div [style "display" "inline-block", style "vertical-align" "top"]
              [ h2 [] [text "–ò—Å–ø–æ–ª—å—Ö—É—é—Ç—Å—è –≤:"]
              , ul []
                <| List.map (drawEdge model)
                <| List.filter
                  (
                    \v ->
                      OrderedDict.get v model.value.edges
                      |> Maybe.andThen .modificator
                      |> (==) (Just modificator)
                  )
                <| OrderedDict.keys model.value.edges
              ]
            ]
          , div[]
            [ button
              [ class "navigation-btn"
              , title "–≤–∑–∞–¥"
              , disabled <| beforeModificator == Nothing
              , onClick <| MsgActivateModificator ( beforeModificator |> Maybe.withDefault modificator )
              ] [text "‚óÄÔ∏è"]
            , button
              [ class "navigation-btn"
              , title "–≤–Ω–∞—á–∞–ª–æ"
              , disabled <| firstModificator == Nothing
              , onClick <| MsgActivateModificator ( firstModificator |> Maybe.withDefault modificator )
              ] [text "üîΩ"]
            , button
              [ class "navigation-btn"
              , title "–ø–æ–¥–Ω—è—Ç—å"
              , onClick <| MsgMoveModificatorUp modificator
              ] [text "‚¨ÜÔ∏è"]
            , button
              [ class "navigation-btn"
              , title "–æ–ø—É—Å—Ç–∏—Ç—å"
              , onClick <| MsgMoveModificatorDown modificator
              ] [text "‚¨áÔ∏è"]
            , button
              [ class "navigation-btn"
              , title "–≤ –Ω–∞—á–∞–ª–æ"
              , onClick <| MsgMoveModificatorStart modificator
              ] [text "‚è´"]
            , button
              [ class "navigation-btn"
              , title "–≤ –∫–æ–Ω–µ—Ü"
              , onClick <| MsgMoveModificatorEnd modificator
              ] [text "‚è¨"]
            , button
              [ class "navigation-btn"
              , title "–æ—á–∏—Å—Ç–∏—Ç—å"
              , onClick <| MsgClearModificator modificator
              ] [text "üóë"]
            , button
              [ class "navigation-btn"
              , title "—É–¥–∞–ª–∏—Ç—å"
              , onClick <| MsgRemoveModificator modificator
              ] [text "üöΩ"]
            , button
              [ class "navigation-btn"
              , title "–∑–∞–∫—Ä—ã—Ç—å"
              , onClick <| MsgSelectTab TabModificatirs
              ] [text "‚ùé"]
            , button
              [ class "navigation-btn"
              , title "–≤–ø–µ—Ä—ë–¥"
              , disabled <| lastModificator == Nothing
              , onClick <| MsgActivateModificator ( lastModificator |> Maybe.withDefault modificator )
              ] [text "üîº"]
            , button
              [ class "navigation-btn"
              , title "–≤–∫–æ–Ω–µ—Ü"
              , disabled <| afterModificator == Nothing
              , onClick <| MsgActivateModificator ( afterModificator |> Maybe.withDefault modificator )
              ] [text "‚ñ∂Ô∏è"]
            ]
          ]
    Nothing -> div []
      [ h1 [] [text "–ù–æ–≤—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä"]
      , br [] []
      , input
        [ onInput MsgChangeAddedModificator
        , type_ "text"
        ] []
      , button
        [ onClick (MsgAddModificator model.state.addedModificator)
        , disabled (model.state.addedModificator == "")
        ] [text "–¥–æ–±–∞–≤–∏—Ç—å"]
      ]
  TabRenameModificator -> case model.state.currentModificator of
    Just modificator -> div []
      [ h1 [] [text "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä"]
      , h2 [] [text modificator]
      , input
        [ value model.state.addedModificator
        , onInput MsgChangeAddedModificator
        , type_ "text"
        ] []
      , button [ onClick <| MsgRenameModificator modificator model.state.addedModificator ] [text "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"]
      ]
    Nothing -> h1 [] [text "Warning!!!"]
  -- TabAnalytics -> div [] []
  TabConfig -> div []
    [ h1 [] [text "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    , h2 [] [text "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –∞—Ñ–π–ª:"]
    , input
      [ value model.config.filename
      , onInput MsgChangeDefaultFileName
      ] []
    , br [] []
    , h2 [] [text "–û—Ç—Å—Ç—É–ø—ã"]
    , pre [] [text <| JE.encode 0 <| JE.int model.config.ident]
    , select
      [ onInput
        (
          MsgChangeIdent
          << Result.withDefault 0
          << JD.decodeString JD.int
        )
      , value <| JE.encode 0 <| JE.int model.config.ident
      ]
      [ option [value "0", selected <| model.config.ident == 0] [text "0"]
      , option [value "1", selected <| model.config.ident == 1] [text "1"]
      , option [value "2", selected <| model.config.ident == 2] [text "2"]
      , option [value "4", selected <| model.config.ident == 4] [text "4"]
      , option [value "8", selected <| model.config.ident == 8] [text "8"]
      ]
    , h2 [] [text "–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –º–µ—Ç–∫–∏"]
    , input
      [ type_ "checkbox"
      , checked model.config.preferLabel
      , onCheck MsgChangePreferLabel
      ] []
    ]
  TabLoadedUrl -> div []
    [ h1 [] [text "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Å—Å—ã–ª–∫–∏"]
    , input [onInput MsgChangeLoadedUrl, value model.state.loadedUrl] []
    , button [onClick <| MsgLoadFromUrl model.state.loadedUrl] [text "–∑–∞–≥—Ä—É–∑–∏—Ç—å"]
    ]
  TabHelp -> Help.help
  _ -> h1 [] [text "–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ"]
css = node "link" [rel "stylesheet", href "style.css"] []
view model = div [] 
  [ css
  , drawTabs model
  , drawContent model
  ]